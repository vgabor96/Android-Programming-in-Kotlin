package com.example.videogameshopapplication

import android.app.Application
import android.os.Build
import android.text.Html
import android.text.Spanned
import android.util.Log
import android.view.View
import android.widget.AdapterView
import androidx.core.text.HtmlCompat
import androidx.lifecycle.*
import com.example.videogameshopapplication.data.*
import kotlinx.coroutines.launch
import java.lang.NumberFormatException

class MainActivityViewModel(application: Application) : AndroidViewModel(application), AdapterView.OnItemSelectedListener {
    private val repository : VideoGameRepository
    private var videoGame = MutableLiveData<VideoGame?>()
    var videoGames:LiveData<List<VideoGame>>
    val videoGamesString : LiveData<Spanned>
    lateinit var selectedVideoGame : VideoGame
    private var fatAmount =0f

    init {
        val dataSource = VideoGameDatabase.getInstance(application).videogameDatabaseDao
        repository= VideoGameRepository(dataSource)

        videoGames=repository.videoGames


        val vgames=repository.videoGames
        videoGamesString = Transformations.map(vgames) { items ->
            formatVideoGames(items, application.resources)
        }

        initializeVideoGames()

    }
    private fun initializeVideoGames() {
        viewModelScope.launch {
            /*
            dailyIntake.value = repository.getTodayIntake()
            */
            videoGame.value = repository.getVideoGame()

        }
    }


    override fun onItemSelected(parent: AdapterView<*>, view: View, pos: Int, id: Long) {
        // An item was selected. You can retrieve the selected item using
        // parent.getItemAtPosition(pos)
        selectedVideoGame=parent.getItemAtPosition(pos) as VideoGame
    }

    override fun onNothingSelected(parent: AdapterView<*>) {
        // Another interface callback
    }


    fun onAdd() {
        val videoGame = selectedVideoGame

        /* val newIntake =DailyIntake(
            dailyOmega3 =fat.omega3*fatAmount,
            dailyOmega6 = fat.omega6*fatAmount,
            dailyCholesterol = fat.cholesterol*fatAmount)
*/
        viewModelScope.launch {
            repository.insert(videoGame)
        }


    }

    fun onTextChanged(text : CharSequence){

        try {
             fatAmount = text.toString().toFloat()
        } catch (e: NumberFormatException) {
            fatAmount=0f
        }


    }
}